import{r as t,o as e,c as o,a as n,b as p,F as c,d as s,e as l}from"./app.96f4461d.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=n("h1",{id:"promise-\u89C4\u8303\u548C\u5E94\u7528",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise-\u89C4\u8303\u548C\u5E94\u7528","aria-hidden":"true"},"#"),s(" Promise \u89C4\u8303\u548C\u5E94\u7528")],-1),k=n("h2",{id:"_1\u3001\u53C2\u8003\u8D44\u6599",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1\u3001\u53C2\u8003\u8D44\u6599","aria-hidden":"true"},"#"),s(" 1\u3001\u53C2\u8003\u8D44\u6599")],-1),b=s("1\u3001 "),m={href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"},d=s("promise A plus \u89C4\u8303(opens new window)"),f=s("2\u3001"),h={href:"https://mp.weixin.qq.com/s/Yrwe2x6HukfqJZM6HkmRcw",target:"_blank",rel:"noopener noreferrer"},y=s("\u3010\u7B2C 1738 \u671F\u3011100 \u884C\u4EE3\u7801\u5B9E\u73B0 Promises/A+ \u89C4\u8303(opens new window)"),w=s("3\u3001"),v={href:"https://www.wangjxk.top/frontend/js/",target:"_blank",rel:"noopener noreferrer"},j=s("JS \u5E38\u89C1\u95EE\u9898\u6574\u7406"),g=s("4\u3001"),x={href:"https://www.cnblogs.com/sugar-tomato/p/11353546.html",target:"_blank",rel:"noopener noreferrer"},_=s("\u53F2\u4E0A\u6700\u8BE6\u7EC6\u624B\u5199 promise \u6559\u7A0B(opens new window)"),P=l(`<h2 id="promisea-\u89C4\u8303" tabindex="-1"><a class="header-anchor" href="#promisea-\u89C4\u8303" aria-hidden="true">#</a> PromiseA+\u89C4\u8303</h2><h3 id="_1\u3001\u672F\u8BED" tabindex="-1"><a class="header-anchor" href="#_1\u3001\u672F\u8BED" aria-hidden="true">#</a> 1\u3001\u672F\u8BED</h3><ul><li>promise \u662F\u4E00\u4E2A\u6709 then \u65B9\u6CD5\u7684\u5BF9\u8C61\u6216\u8005\u51FD\u6570\uFF0C\u884C\u4E3A\u9075\u5FAA\u672C\u89C4\u8303</li><li>thenable \u662F\u4E00\u4E2A\u6709 then \u65B9\u6CD5\u7684\u5BF9\u8C61\u6216\u8005\u662F\u51FD\u6570</li><li>value \u662F promise \u72B6\u6001\u6210\u529F\u65F6\u7684\u503C\uFF0C\u4E5F\u5C31\u662F resolve \u7684\u53C2\u6570\uFF0C\u6307\u5404\u79CD js \u503C\uFF08\u5305\u62EC undefined\u3001thenable \u548C promise\uFF09</li><li>reason \u662F promise \u72B6\u6001\u5931\u8D25\u65F6\u7684\u503C\uFF0C\u4E5F\u5C31\u662F reject \u7684\u53C2\u6570\uFF0C\u8868\u793A\u62D2\u7EDD\u7684\u539F\u56E0</li><li>exception \u662F\u4E00\u4E2A\u4F7F\u7528 throw \u629B\u51FA\u7684\u5F02\u5E38\u503C</li></ul><h3 id="_2\u3001promise-states" tabindex="-1"><a class="header-anchor" href="#_2\u3001promise-states" aria-hidden="true">#</a> 2\u3001Promise States</h3><p>promise \u6709\u4E09\u79CD\u72B6\u6001\uFF0C\u6CE8\u610F\u4ED6\u4EEC\u4E4B\u95F4\u7684\u6D41\u8F6C\u5173\u7CFB</p><h4 id="_1\u3001pending" tabindex="-1"><a class="header-anchor" href="#_1\u3001pending" aria-hidden="true">#</a> 1\u3001pending</h4><ul><li>\u521D\u59CB\u72B6\u6001\uFF0C\u53EF\u6539\u53D8</li><li>\u4E00\u4E2A promise \u5728 resolve \u6216\u8005 reject \u4E4B\u524D\u90FD\u5904\u4E8E\u8FD9\u4E2A\u72B6\u6001</li><li>\u53EF\u901A\u8FC7 resolve \u8F6C\u53D8\u4E3A fulfilled \u72B6\u6001</li><li>\u53EF\u901A\u8FC7 reject \u8F6C\u53D8\u4E3A rejected \u72B6\u6001</li></ul><h4 id="_2\u3001fulfilled" tabindex="-1"><a class="header-anchor" href="#_2\u3001fulfilled" aria-hidden="true">#</a> 2\u3001fulfilled</h4><ul><li>\u6700\u7EC8\u6001\uFF0C\u4E0D\u53EF\u53D8</li><li>\u4E00\u4E2A promise \u88AB resolve \u540E\u4F1A\u53D8\u4E3A\u8FD9\u4E2A\u72B6\u6001</li><li>\u5FC5\u987B\u62E5\u6709\u4E00\u4E2A value \u503C</li></ul><h4 id="_3\u3001rejected" tabindex="-1"><a class="header-anchor" href="#_3\u3001rejected" aria-hidden="true">#</a> 3\u3001rejected</h4><ul><li>\u6700\u7EC8\u6001\uFF0C\u4E0D\u53EF\u53D8</li><li>\u4E00\u4E2A promise \u88AB reject \u540E\u4F1A\u53D8\u4E3A\u8FD9\u4E2A\u72B6\u6001</li><li>\u5FC5\u987B\u62E5\u6709\u4E00\u4E2A reason \u72B6\u6001\u6D41\u8F6C\u5982\u4E0B\uFF1A pending -&gt; resolve(value) -&gt; fulfilled pending -&gt; reject(reason) -&gt; rejected</li></ul><h3 id="_3\u3001then" tabindex="-1"><a class="header-anchor" href="#_3\u3001then" aria-hidden="true">#</a> 3\u3001then</h3><p>promise \u5E94\u8BE5\u6709\u4E2A then \u65B9\u6CD5\uFF0C\u7528\u6765\u8BBF\u95EE\u6700\u7EC8\u7684\u7ED3\u679C\uFF0C\u65E0\u8BBA\u662F value \u8FD8\u662F reason\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_1\u3001\u53C2\u6570\u8981\u6C42" tabindex="-1"><a class="header-anchor" href="#_1\u3001\u53C2\u6570\u8981\u6C42" aria-hidden="true">#</a> 1\u3001\u53C2\u6570\u8981\u6C42</h4><ul><li>onFulfilled \u5FC5\u987B\u662F\u51FD\u6570\u7C7B\u578B\uFF0C\u53EF\u9009\uFF0C\u5982\u679C\u4E0D\u662F\u51FD\u6570\uFF0C\u5E94\u8BE5\u88AB\u5FFD\u7565</li><li>onRejected \u5FC5\u987B\u662F\u51FD\u6570\u7C7B\u578B\uFF0C\u53EF\u9009\uFF0C\u5982\u679C\u4E0D\u662F\u51FD\u6570\uFF0C\u5E94\u8BE5\u88AB\u5FFD\u7565</li></ul><h4 id="_2\u3001onfulfilled-\u7279\u6027" tabindex="-1"><a class="header-anchor" href="#_2\u3001onfulfilled-\u7279\u6027" aria-hidden="true">#</a> 2\u3001onFulfilled \u7279\u6027</h4><ul><li>\u5728 promise \u53D8\u4E3A fulfilled \u65F6\uFF0C\u5E94\u8BE5\u8C03\u7528 onFulfilled\uFF0C\u53C2\u6570\u662F value</li><li>\u5728 promise \u53D8\u6210 fulfilled \u4E4B\u524D\uFF0C\u4E0D\u5E94\u8BE5\u88AB\u8C03\u7528</li><li>\u53EA\u80FD\u88AB\u8C03\u7528\u4E00\u6B21\uFF08\u5B9E\u73B0\u65F6\u9700\u4F7F\u7528\u53D8\u91CF\u6765\u9650\u5236\u6267\u884C\u6B21\u6570\uFF09</li></ul><h4 id="_3\u3001onrejected-\u7279\u6027" tabindex="-1"><a class="header-anchor" href="#_3\u3001onrejected-\u7279\u6027" aria-hidden="true">#</a> 3\u3001onRejected \u7279\u6027</h4><ul><li>\u5728 promise \u53D8\u6210 rejected \u65F6\uFF0C\u5E94\u8BE5\u8C03\u7528 onRejected\uFF0C\u53C2\u6570\u662F reason</li><li>\u5728 promise \u53D8\u6210 rejected \u4E4B\u524D\uFF0C\u4E0D\u5E94\u8BE5\u88AB\u8C03\u7528</li><li>\u53EA\u80FD\u88AB\u8C03\u7528\u4E00\u6B21</li></ul><h4 id="_4\u3001onfulfilled-\u548C-onrejected-\u5E94\u8BE5\u662F\u5FAE\u4EFB\u52A1" tabindex="-1"><a class="header-anchor" href="#_4\u3001onfulfilled-\u548C-onrejected-\u5E94\u8BE5\u662F\u5FAE\u4EFB\u52A1" aria-hidden="true">#</a> 4\u3001onFulfilled \u548C onRejected \u5E94\u8BE5\u662F\u5FAE\u4EFB\u52A1</h4><p>\u5728\u6267\u884C\u4E0A\u4E0B\u6587\u5806\u6808\u4EC5\u5305\u542B\u5E73\u53F0\u4EE3\u7801\u4E4B\u524D\uFF0C\u4E0D\u5F97\u8C03 onFulfilled \u6216 onRejected \u51FD\u6570\uFF0ConFulfilled \u548C onRejected \u5FC5\u987B\u88AB\u4F5C\u4E3A\u666E\u901A\u51FD\u6570\u8C03\u7528\uFF08\u5373\u975E\u5B9E\u4F8B\u5316\u8C03\u7528\uFF0C\u8FD9\u6837\u51FD\u6570\u5185\u90E8 this \u975E\u4E25\u683C\u6A21\u5F0F\u4E0B\u6307\u5411 window\uFF09\uFF0C\u4F7F\u7528 queueMicrotask \u6216\u8005 setTimeout \u6765\u5B9E\u73B0\u5FAE\u4EFB\u52A1\u7684\u8C03\u7528</p><h4 id="_5\u3001then-\u65B9\u6CD5\u53EF\u4EE5\u88AB\u8C03\u7528\u591A\u6B21" tabindex="-1"><a class="header-anchor" href="#_5\u3001then-\u65B9\u6CD5\u53EF\u4EE5\u88AB\u8C03\u7528\u591A\u6B21" aria-hidden="true">#</a> 5\u3001then \u65B9\u6CD5\u53EF\u4EE5\u88AB\u8C03\u7528\u591A\u6B21</h4><ul><li>promise \u72B6\u6001\u53D8\u6210 fulfilled \u540E\uFF0C\u6240\u6709\u7684 onFulfilled \u56DE\u8C03\u90FD\u9700\u8981\u6309\u7167 then \u7684\u987A\u5E8F\u6267\u884C\uFF0C\u4E5F\u5C31\u662F\u6309\u7167\u6CE8\u518C\u987A\u5E8F\u6267\u884C\uFF08\u5B9E\u73B0\u65F6\u7528\u6570\u7EC4\u5B58\u50A8\u591A\u4E2A onFulfilled \u7684\u56DE\u8C03\uFF09</li><li>promise \u72B6\u6001\u53D8\u6210 rejected \u540E\uFF0C\u6240\u6709\u7684 onRejected \u56DE\u8C03\u90FD\u9700\u8981\u6309\u7167 then \u7684\u987A\u5E8F\u6267\u884C\uFF0C\u4E5F\u5C31\u662F\u6309\u7167\u6CE8\u518C\u987A\u5E8F\u6267\u884C\uFF08\u5B9E\u73B0\u65F6\u7528\u6570\u7EC4\u5B58\u50A8\u591A\u4E2A onRejected \u7684\u56DE\u8C03\uFF09</li></ul><h4 id="_6\u3001then-\u5FC5\u987B\u8FD4\u56DE\u4E00\u4E2A-promise" tabindex="-1"><a class="header-anchor" href="#_6\u3001then-\u5FC5\u987B\u8FD4\u56DE\u4E00\u4E2A-promise" aria-hidden="true">#</a> 6\u3001then \u5FC5\u987B\u8FD4\u56DE\u4E00\u4E2A promise</h4><p>then \u5FC5\u987B\u8FD4\u56DE\u4E00\u4E2A promise</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>promise2 <span class="token operator">=</span> promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>onFulfilled \u6216 onRejected \u6267\u884C\u7684\u7ED3\u679C\u662F x\uFF0C\u8C03\u7528 resolvePromise</li><li>\u5982\u679C onFulfilled \u6216\u8005 onRejected \u6267\u884C\u65F6\u629B\u51FA\u5F02\u5E38 e\uFF0Cpromise2 \u9700\u8981\u88AB reject\uFF0C\u5176 reason \u4E3A e</li><li>\u5982\u679C onFulfilled \u4E0D\u662F\u4E00\u4E2A\u51FD\u6570\u4E14 promise1 \u5DF2\u7ECF fulfilled\uFF0Cpromise2 \u4EE5 promise1 \u7684 value \u89E6\u53D1 onFulfilled</li><li>\u5982\u679C onRejected \u4E0D\u662F\u4E00\u4E2A\u51FD\u6570\u4E14 promise1 \u5DF2\u7ECF rejected\uFF0Cpromise2 \u4EE5 promise1 \u7684 reason \u89E6\u53D1 onRejected</li></ul><h4 id="_7\u3001promise-\u7684\u89E3\u51B3\u8FC7\u7A0B-resolvepromise" tabindex="-1"><a class="header-anchor" href="#_7\u3001promise-\u7684\u89E3\u51B3\u8FC7\u7A0B-resolvepromise" aria-hidden="true">#</a> 7\u3001Promise \u7684\u89E3\u51B3\u8FC7\u7A0B resolvePromise</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>\u5982\u679C x \u662F\u5F53\u524D promise \u672C\u8EAB\uFF08promise2 \u548C x \u76F8\u7B49\uFF09\uFF0C\u90A3\u4E48 reject TypeError</li><li>\u5982\u679C x \u662F\u53E6\u4E00\u4E2A promise\uFF08\u5373 x \u662F\u4E00\u4E2A promise\uFF09\uFF0C\u90A3\u4E48\u6CBF\u7528\u5B83\u7684 state \u548C result \u72B6\u6001 <ul><li>\u5982\u679C x \u662F pending \u6001\uFF0C\u90A3\u4E48 promise \u5FC5\u987B\u8981\u5728 pending\uFF0C\u76F4\u5230 x \u53D8\u6210 fulfilled \u6216\u8005 rejected</li><li>\u5982\u679C x \u662F fulfilled \u6001\uFF0C\u7528\u76F8\u540C\u7684 value \u6267\u884C promise</li><li>\u5982\u679C x \u662F rejected \u6001\uFF0C\u7528\u76F8\u540C\u7684 reason \u62D2\u7EDD promise</li></ul></li><li>\u5982\u679C x \u662F\u4E00\u4E2A object \u6216\u8005\u662F\u4E00\u4E2A function\uFF08\u4E0D\u5E38\u89C1\uFF09 <ul><li>\u9996\u5148\u53D6 x.then \u7684\u503C\uFF0Clet then = x.then</li><li>\u5982\u679C\u53D6 x.then \u8FD9\u6B65\u51FA\u9519\u629B\u51FA e\uFF0C\u90A3\u4E48\u4EE5 e \u4E3A reason \u62D2\u7EDD promise</li><li>\u5982\u679C then \u662F\u4E00\u4E2A\u51FD\u6570\uFF0C\u5C06 x \u4F5C\u4E3A\u51FD\u6570\u7684\u4F5C\u7528\u57DF this \u8C03\u7528\uFF0C\u5373 then.call(x, resolvePromise, rejectPromise)\uFF0C\u7B2C\u4E00\u4E2A\u53C2\u6570\u53EB resolvePromise\uFF0C\u7B2C\u4E8C\u4E2A\u53C2\u6570\u53EB rejectPromise <ul><li>\u5982\u679C resolvePromise \u4EE5 y \u4E3A\u53C2\u6570\u88AB\u8C03\u7528\uFF0C\u5219\u6267\u884C resolvePromise(promise2, y, resolve, reject)</li><li>\u5982\u679C rejectPromise \u4EE5 r \u4E3A\u53C2\u6570\u88AB\u8C03\u7528\uFF0C\u5219\u4EE5 r \u4E3A reason \u62D2\u7EDD promise</li><li>\u5982\u679C resolvePromise \u548C rejectPromise \u90FD\u8C03\u7528\u4E86\uFF0C\u90A3\u4E48\u7B2C\u4E00\u4E2A\u8C03\u7528\u4F18\u5148\uFF0C\u540E\u9762\u7684\u8C03\u7528\u5FFD\u7565\u3002</li><li>\u5982\u679C\u8C03\u7528 then \u629B\u51FA\u5F02\u5E38 e\uFF1A\u82E5 resolvePromise \u6216 rejectPromise \u5DF2\u7ECF\u88AB\u8C03\u7528\uFF0C\u90A3\u4E48\u5FFD\u7565\uFF0C\u5426\u5219\u4EE5 e \u4E3A reason \u62D2\u7EDD promise</li></ul></li><li>\u5982\u679C then \u4E0D\u662F\u4E00\u4E2A function\uFF0C\u4EE5 x \u4E3A value \u6267\u884C promise</li></ul></li><li>\u5982\u679C x \u4E0D\u662F object \u6216\u8005 function\uFF0C\u4EE5 x \u4E3A value \u6267\u884C promise</li></ul><h3 id="_4\u3001promise-a-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_4\u3001promise-a-\u5B9E\u73B0" aria-hidden="true">#</a> 4\u3001promise A+\u5B9E\u73B0</h3><h4 id="_1\u3001\u5B9A\u4E49\u4E09\u79CD\u72B6\u6001-\u8BBE\u7F6E\u521D\u59CB\u6001-\u4F7F\u7528-class-\u5B9E\u73B0\u7C7B" tabindex="-1"><a class="header-anchor" href="#_1\u3001\u5B9A\u4E49\u4E09\u79CD\u72B6\u6001-\u8BBE\u7F6E\u521D\u59CB\u6001-\u4F7F\u7528-class-\u5B9E\u73B0\u7C7B" aria-hidden="true">#</a> 1\u3001\u5B9A\u4E49\u4E09\u79CD\u72B6\u6001\uFF0C\u8BBE\u7F6E\u521D\u59CB\u6001\uFF0C\u4F7F\u7528 class \u5B9E\u73B0\u7C7B</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&quot;rejected&quot;</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&quot;fulFilled&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">MPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//pending\u65F6\u56DE\u8C03\u51FD\u6570\u5B58\u50A8</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_2\u3001\u6DFB\u52A0-reject-\u548C-resolve-\u65B9\u6CD5\u66F4\u6539\u72B6\u6001-\u6267\u884C\u56DE\u8C03" tabindex="-1"><a class="header-anchor" href="#_2\u3001\u6DFB\u52A0-reject-\u548C-resolve-\u65B9\u6CD5\u66F4\u6539\u72B6\u6001-\u6267\u884C\u56DE\u8C03" aria-hidden="true">#</a> 2\u3001\u6DFB\u52A0 reject \u548C resolve \u65B9\u6CD5\u66F4\u6539\u72B6\u6001\uFF0C\u6267\u884C\u56DE\u8C03</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_3\u3001promise-\u6DFB\u52A0\u5165\u53C2\u51FD\u6570-\u51FD\u6570\u540C\u6B65\u6267\u884C-\u5F02\u5E38\u9700-reject" tabindex="-1"><a class="header-anchor" href="#_3\u3001promise-\u6DFB\u52A0\u5165\u53C2\u51FD\u6570-\u51FD\u6570\u540C\u6B65\u6267\u884C-\u5F02\u5E38\u9700-reject" aria-hidden="true">#</a> 3\u3001promise \u6DFB\u52A0\u5165\u53C2\u51FD\u6570\uFF0C\u51FD\u6570\u540C\u6B65\u6267\u884C\uFF0C\u5F02\u5E38\u9700 reject</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_4\u3001\u5B9E\u73B0-then-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_4\u3001\u5B9E\u73B0-then-\u65B9\u6CD5" aria-hidden="true">#</a> 4\u3001\u5B9E\u73B0 then \u65B9\u6CD5</h4><p>1\u3001\u5165\u53C2\u4E3A onFulfilled \u548C onRejected \u5E76\u68C0\u67E5\u53C2\u6570\uFF0C\u5982\u679C\u4E0D\u662F function \u5C31\u5FFD\u7565\uFF0C\u539F\u6837\u8FD4\u56DE value \u6216\u8005 reason 2\u3001\u6700\u7EC8\u8FD4\u56DE promise\uFF0C\u6839\u636E\u4E0D\u540C\u72B6\u6001\u6267\u884C onFulfilled \u548C onRejected\uFF0C\u6267\u884C\u5F02\u5E38\u5219 reject\uFF0C\u6267\u884C\u6B63\u5E38\u5219\u6267\u884C resovlePromise(promise2, x, resolve, reject)\u3002\u6CE8\u610F\uFF1Arejected \u72B6\u6001\u6267\u884C onRejected\uFF0CFulfilled \u72B6\u6001\u6267\u884C onFulfilled\uFF0Cpending \u72B6\u6001\u65F6\u6536\u96C6\u56DE\u8C03\u81F3\u6570\u7EC4\uFF0C\u5F85\u72B6\u6001\u53D8\u66F4\u65F6\u6267\u884C\uFF0C\u53EF\u4F7F\u7528 ES6 \u7684 getter \u548C setter \u76D1\u542C\u72B6\u6001\u53D8\u6362\u5E76\u6267\u884C\uFF0C\u4E5F\u53EF\u4EE5\u76F4\u63A5\u653E\u5728 resolve \u548C reject \u65B9\u6CD5\u4E2D\u56DE\u8C03\u3002 3\u3001onFulfilled \u548C onRejected \u662F\u5FAE\u4EFB\u52A1\uFF0C\u4F7F\u7528 queueMicrotask \u5305\u88F9\u6216 setTimeout \u5305\u88F9</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u5165\u53C2\u4E3AonFulfilled\u548ConRejected\u5E76\u68C0\u67E5\u53C2\u6570\uFF0C\u5982\u679C\u4E0D\u662Ffunction \u5C31\u5FFD\u7565\uFF0C\u539F\u6837\u8FD4\u56DEvalue\u6216\u8005reason</span>
    onFulfilled <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value
    onRejected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> err<span class="token punctuation">}</span>
    <span class="token comment">//\u6700\u7EC8\u8FD4\u56DEpromise</span>
    <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//\u6839\u636E\u4E0D\u540C\u72B6\u6001\u6267\u884ConFulfilled\u548ConRejected\uFF0C\u6267\u884C\u5F02\u5E38\u5219reject\uFF0C\u6267\u884C\u6B63\u5E38\u8FD4\u56DEx\u5219\u6267\u884CresovlePromise</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//onFulfilled\u548ConRejected\u6267\u884C\u662F\u5FAE\u4EFB\u52A1</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span><span class="token punctuation">{</span>
                    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span><span class="token punctuation">{</span>
                    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
                <span class="token comment">//pending\u72B6\u6001\u65F6\u6536\u96C6\u56DE\u8C03\u81F3\u6570\u7EC4</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    <span class="token keyword">try</span><span class="token punctuation">{</span>
                        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    <span class="token keyword">try</span><span class="token punctuation">{</span>
                        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h4 id="_5\u3001resolvepromise-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_5\u3001resolvepromise-\u5B9E\u73B0" aria-hidden="true">#</a> 5\u3001resolvePromise \u5B9E\u73B0</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">resovlePromise</span><span class="token punctuation">(</span><span class="token parameter">newPromise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C newPromise \u548C x \u6307\u5411\u540C\u4E00\u5BF9\u8C61\uFF0C\u4EE5 TypeError \u4E3A\u636E\u56E0\u62D2\u7EDD\u6267\u884C newPromise</span>
    <span class="token comment">// \u8FD9\u662F\u4E3A\u4E86\u9632\u6B62\u6B7B\u5FAA\u73AF</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newPromise <span class="token operator">===</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;The promise and the return value are the same&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//\u5982\u679Cx\u662F\u4E00\u4E2Apromise\uFF0C\u90A3\u4E48\u6CBF\u7528\u5B83\u7684 state \u548C result \u72B6\u6001</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MPromise</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//\u5982\u679Cx\u662F\u4E00\u4E2A\u5BF9\u8C61\u6216\u8005\u51FD\u6570\uFF0C\u4E0D\u4E3Anull</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> then <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            then <span class="token operator">=</span> x<span class="token punctuation">.</span>then
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>then<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//\u6DFB\u52A0\u662F\u5426\u8C03\u7528\u8FC7\u7684\u6807\u5FD7</span>
            <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token keyword">try</span><span class="token punctuation">{</span>
                <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
                    called <span class="token operator">=</span> <span class="token boolean">true</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>newPromise<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
                    called <span class="token operator">=</span> <span class="token boolean">true</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="_6\u3001promise-reject-\u548C-promise-resolve-\u53CA-catch-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_6\u3001promise-reject-\u548C-promise-resolve-\u53CA-catch-\u5B9E\u73B0" aria-hidden="true">#</a> 6\u3001Promise.reject \u548C Promise.resolve \u53CA catch \u5B9E\u73B0</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MPromise</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_7\u3001promise-race-\u548C-promise-all-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_7\u3001promise-race-\u548C-promise-all-\u5B9E\u73B0" aria-hidden="true">#</a> 7\u3001promise.race \u548C promise.all \u5B9E\u73B0</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promiseList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;input param must be a list&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> size <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length
        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                MPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">promiseList</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
                    <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promiseList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;input param must be a list&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> size <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length
        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                MPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">promiseList</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value
                    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">++</span> <span class="token operator">===</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u8FD4\u56DE\u6240\u6709promise\u7684\u72B6\u6001\u548C\u7ED3\u679C</span>
<span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token parameter">promiseList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;arguments must be an array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">const</span> promiseNum <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length
    <span class="token keyword">const</span> resolvedArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>promiseNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      MPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        resolvedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
          status<span class="token operator">:</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">,</span>
          value
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        resolvedArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
          status<span class="token operator">:</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">,</span>
          reason
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token operator">++</span> <span class="token operator">==</span> promiseNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>resolvedArray<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><h3 id="_5\u3001\u5168\u91CF\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#_5\u3001\u5168\u91CF\u4EE3\u7801" aria-hidden="true">#</a> 5\u3001\u5168\u91CF\u4EE3\u7801</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&quot;rejected&quot;</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&quot;fulfilled&quot;</span>

<span class="token keyword">class</span> <span class="token class-name">MPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//\u5165\u53C2\u4E3AonFulfilled\u548ConRejected\u5E76\u68C0\u67E5\u53C2\u6570\uFF0C\u5982\u679C\u4E0D\u662Ffunction \u5C31\u5FFD\u7565\uFF0C\u539F\u6837\u8FD4\u56DEvalue\u6216\u8005reason</span>
    onFulfilled <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value
    onRejected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>
      <span class="token operator">?</span> <span class="token function-variable function">onRejected</span>
      <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> err
        <span class="token punctuation">}</span>
    <span class="token comment">//\u6700\u7EC8\u8FD4\u56DEpromise</span>
    <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">//\u6839\u636E\u4E0D\u540C\u72B6\u6001\u6267\u884ConFulfilled\u548ConRejected\uFF0C\u6267\u884C\u5F02\u5E38\u5219reject\uFF0C\u6267\u884C\u6B63\u5E38\u8FD4\u56DEx\u5219\u6267\u884CresovlePromise</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//onFulfilled\u548ConRejected\u6267\u884C\u662F\u5FAE\u4EFB\u52A1</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise2
  <span class="token punctuation">}</span>

  <span class="token function">resovlePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C newPromise \u548C x \u6307\u5411\u540C\u4E00\u5BF9\u8C61\uFF0C\u4EE5 TypeError \u4E3A\u636E\u56E0\u62D2\u7EDD\u6267\u884C newPromise</span>
    <span class="token comment">// \u8FD9\u662F\u4E3A\u4E86\u9632\u6B62\u6B7B\u5FAA\u73AF</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;The promise and the return value are the same&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//\u5982\u679Cx\u662F\u4E00\u4E2Apromise\uFF0C\u90A3\u4E48\u6CBF\u7528\u5B83\u7684 state \u548C result \u72B6\u6001</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>

      <span class="token comment">//\u5982\u679Cx\u662F\u4E00\u4E2A\u5BF9\u8C61\u6216\u8005\u51FD\u6570\uFF0C\u4E0D\u4E3Anull</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        then <span class="token operator">=</span> x<span class="token punctuation">.</span>then
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>then<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//\u6DFB\u52A0\u662F\u5426\u8C03\u7528\u8FC7\u7684\u6807\u5FD7</span>
        <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
            x<span class="token punctuation">,</span>
            <span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
              called <span class="token operator">=</span> <span class="token boolean">true</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resovlePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
              called <span class="token operator">=</span> <span class="token boolean">true</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">MPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promiseList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;input param must be a list&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> size <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length
      <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          MPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">promiseList</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
            <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promiseList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;input param must be a list&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> size <span class="token operator">=</span> promiseList<span class="token punctuation">.</span>length
      <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          MPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">promiseList</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value
              <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">++</span> <span class="token operator">===</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">deferred</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dfd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    dfd<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      dfd<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve
      dfd<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dfd
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MPromise
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br></div></div>`,49);function F(R,E){const a=t("ExternalLinkIcon");return e(),o(c,null,[i,k,n("p",null,[b,n("a",m,[d,p(a)])]),n("p",null,[f,n("a",h,[y,p(a)])]),n("p",null,[w,n("a",v,[j,p(a)])]),n("p",null,[g,n("a",x,[_,p(a)])]),P],64)}var q=u(r,[["render",F]]);export{q as default};
